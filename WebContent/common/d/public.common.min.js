/*
** nopCommerce custom js functions
*/
// 简单JavaScript模板引擎
// John Resig - http://ejohn.org/ - MIT Licensed
(function () {
    var cache = {};

    this.tmpl = function tmpl(str, data) {
        // 判断我们是否已经有这么一个模板，或者我们需要载入模板
        // 并保证把结果保存到缓存中。
        var fn = !/\W/.test(str) ?
          cache[str] = cache[str] ||
            tmpl(document.getElementById(str).innerHTML) :

          // 生成一个可重用的函数，用于提供模板生成功能
          // (它会被记录到缓存内).
          new Function("obj",
            "var p=[],print=function(){p.push.apply(p,arguments);};" +

            // 通过with(){}把数据作为本地变量引入
            "with(obj){p.push('" +

            // 把模板转换未纯javascript代码
            str
              .replace(/[\r\t\n]/g, " ")
              .split("<%").join("\t")
              .replace(/((^|%>)[^\t]*)'/g, "$1\r")
              .replace(/\t=(.*?)%>/g, "',$1,'")
              .split("\t").join("');")
              .split("%>").join("p.push('")
              .split("\r").join("\\'")
          + "');}return p.join('');");

        // 给用户提供一些基本的柯里化功能
        return data ? fn(data) : fn;
    };
})();
$(document).on('focusin', function (e) {
    if (e != null) {
        if ($(e.target).find(".mce-window").length) {
            e.stopImmediatePropagation();
        }
    }
});


function getE(name) {
    //Obsolete since nopCommerce 2.60. But still here for backwards compatibility (in case of some plugin developers used it in their plugins or customized solutions)
    if (document.getElementById)
        var elem = document.getElementById(name);
    else if (document.all)
        var elem = document.all[name];
    else if (document.layers)
        var elem = document.layers[name];
    return elem;
}

function OpenWindow(query, w, h, scroll) {
    var l = (screen.width - w) / 2;
    var t = (screen.height - h) / 2;

    winprops = 'resizable=0, height=' + h + ',width=' + w + ',top=' + t + ',left=' + l + 'w';
    if (scroll) winprops += ',scrollbars=1';
    var f = window.open(query, "_blank", winprops);
}

function setLocation(url) {
    window.location.href = url;
}

function displayAjaxLoading(display) {
    if (display) {
        $('.ajax-loading-block-window').show();
    }
    else {
        $('.ajax-loading-block-window').hide('slow');
    }
}

function AddFavorite(sURL, sTitle) {
    try {
        window.external.addFavorite(sURL, sTitle);
    }
    catch (e) {
        try {
            window.sidebar.addPanel(sTitle, sURL, "");
        }
        catch (e) {
            alert("加入收藏失败，请使用Ctrl+D进行添加");
        }
    }
}


function SetHome(url) {
    if (document.all) {
        document.body.style.behavior = 'url(#default#homepage)';
        document.body.setHomePage(url);
    } else {
        alert("您好,您的浏览器不支持自动设置页面为首页功能,请您手动在浏览器里设置该页面为首页!");
    }
}


function displayPopupNotification(message, messagetype, modal) {
    //types: success, error
    var container;
    if (messagetype == 'success') {
        //success
        container = $('#dialog-notifications-success');
    }
    else if (messagetype == 'error') {
        //error
        container = $('#dialog-notifications-error');
    }
    else {
        //other
        container = $('#dialog-notifications-success');
    }

    //we do not encode displayed message
    var htmlcode = '';
    if ((typeof message) == 'string') {
        htmlcode = '<p>' + message + '</p>';
    } else {
        for (var i = 0; i < message.length; i++) {
            htmlcode = htmlcode + '<p>' + message[i] + '</p>';
        }
    }

    container.html(htmlcode);

    var isModal = (modal ? true : false);
    container.dialog({ modal: isModal });
}


var barNotificationTimeout;
function displayBarNotification(message, messagetype, timeout) {
    clearTimeout(barNotificationTimeout);

    //types: success, error
    var cssclass = 'success';
    if (messagetype == 'success') {
        cssclass = 'success';
    }
    else if (messagetype == 'error') {
        cssclass = 'error';
    }
    //remove previous CSS classes and notifications
    $('#bar-notification')
        .removeClass('success')
        .removeClass('error');
    $('#bar-notification .content').remove();

    //we do not encode displayed message

    //add new notifications
    var htmlcode = '';
    if ((typeof message) == 'string') {
        htmlcode = '<p class="content">' + message + '</p>';
    } else {
        for (var i = 0; i < message.length; i++) {
            htmlcode = htmlcode + '<p class="content">' + message[i] + '</p>';
        }
    }
    $('#bar-notification').append(htmlcode)
        .addClass(cssclass)
        .fadeIn('slow')
        .mouseenter(function () {
            clearTimeout(barNotificationTimeout);
        });

    $('#bar-notification .close').unbind('click').click(function () {
        $('#bar-notification').fadeOut('slow');
    });

    //timeout (if set)
    if (timeout > 0) {
        barNotificationTimeout = setTimeout(function () {
            $('#bar-notification').fadeOut('slow');
        }, timeout);
    }
}
//对动态图片处理加载lazyload
function DynamicLoad(img) {
    var currentImg = $(img);
    var isload = currentImg.attr("isload");
    if (isload != 1) {
        if (currentImg.hasClass("lazyload")) {
            currentImg.attr("isload", 1);
            currentImg.attr("src", currentImg.attr("data-original"));//ie7和ie8下此语句会触发onload事件
        }
    }
}
function ShowMessageInBar(message) {
    var options = {};
    var bar = $("#progressbar", window.parent.document);
    bar.html(message);
    bar.show();
    setTimeout(hideTheProgressbar, 300);
}

function hideTheProgressbar() {
    var bar = $("#progressbar", window.parent.document);
    bar.hide();
}

function htmlEncode(value) {
    return $('<div/>').text(value).html();
}

function htmlDecode(value) {
    return $('<div/>').html(value).text();
}

try {
    (function ($, undefined) {
        var that;
        $.widget("ui.ajaxdialog", $.ui.dialog, {
            version: "1.10.3",
            options: {
                ajaxurl: "",
                httpType: "Get",
                processData: null
            },

            open: function () {
                this._super();
                that = this;
                if (this.options.ajaxurl != "") {
                    this.element.html("loading...");
                    $.ajax({
                        cache: false,
                        url: this.options.ajaxurl,
                        type: this.options.httpType,
                        success: this._processHtml,
                        error: this.ajaxFailure
                    });
                }
            }
            ,
            _processHtml: function (data) {
                that._trigger("processData", $, { htmlElement: that.element, httpData: data });
            },
            ajaxFailure: function () {
            },
            _makeDraggable: function () {
                var that = this,
                    options = this.options;

                function filteredUi(ui) {
                    return {
                        position: ui.position,
                        offset: ui.offset
                    };
                }

                this.uiDialog.draggable({
                    cancel: " .ui-dialog-titlebar-close",
                    handle: ".contentDragHandler,.ui-dialog-titlebar",
                    containment: "document",
                    start: function (event, ui) {
                        $(this).addClass("ui-dialog-dragging");
                        that._blockFrames();
                        that._trigger("dragStart", event, filteredUi(ui));
                    },
                    drag: function (event, ui) {
                        that._trigger("drag", event, filteredUi(ui));
                    },
                    stop: function (event, ui) {
                        options.position = [
                            ui.position.left - that.document.scrollLeft(),
                            ui.position.top - that.document.scrollTop()
                        ];
                        $(this).removeClass("ui-dialog-dragging");
                        that._unblockFrames();
                        that._trigger("dragStop", event, filteredUi(ui));
                    }
                });
            }
        })
    })(jQuery);
}
catch (e)
{ }


try {
    (function ($, undefined) {
        $.widget("ui.boxsable", $.ui.mouse, {
            version: "1.10.3",
            widgetEventPrefix: "boxs",
            options: {
                appendTo: "body",
                autoRefresh: true,
                distance: 0,
                filter: "*",
                tolerance: "touch",
                disabled: false,

                // callbacks
                draging: null,
                start: null,
                stop: null
            },
            _create: function () {
                that = this;

                this.element.addClass("ui-boxable");
                this.dragged = false;
                this._mouseInit();
                this.helper = $(".ui-selectable-helper").length > 0 ? $(".ui-selectable-helper") : $("<div class='ui-selectable-helper'></div>");

            },

            _destroy: function () {
                this.element
                .removeClass("ui-boxable ui-selectable-disabled");
                this._mouseDestroy();
            },

            _mouseStart: function (event) {
                var that = this,
                    options = this.options;
                this.helper.html("");
                this.opos = [event.pageX, event.pageY];

                if (this.options.disabled) {
                    return;
                }

                this._trigger("start", event);
                $(options.appendTo).append(this.helper);
                // position helper (lasso)
                this.helper.css({
                    "left": event.pageX,
                    "top": event.pageY,
                    "width": 0,
                    "height": 0,
                    "zIndex": 99999
                });

            },

            _mouseDrag: function (event) {

                this.dragged = true;
                if (this.options.disabled) {
                    return;
                }
                this._propagate("draging", event);
                var tmp,
                    that = this,
                    options = this.options,
                    x1 = this.opos[0],
                    y1 = this.opos[1],
                    x2 = event.pageX,
                    y2 = event.pageY;

                if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
                if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
                this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 });
                this._trigger("draging", event, this.ui());
                return false;
            },

            _mouseStop: function (event) {
                if (this.options.disabled) {
                    return;
                }
                var that = this;
                this.dragged = false;
                this._trigger("stop", event, this.ui());
                // this.helper.remove();
                this.options.disabled = true;
                return false;
            },

            _propagate: function (n, event) {
                $.ui.plugin.call(this, n, [event, this.ui()]);
                (n !== "dragging" && this._trigger(n, event, this.ui()));
            },

            plugins: {},

            ui: function () {
                return {
                    element: this.element,
                    helper: this.helper
                };
            }
        });

    })(jQuery);
}
catch (e)
{ }


function toHexColor(r, g, b) {
    var hex = '#';
    var hexStr = '0123456789ABCDEF';
    low = r % 16;
    high = (r - low) / 16;
    hex += hexStr.charAt(high) + hexStr.charAt(low);
    low = g % 16;
    high = (g - low) / 16;
    hex += hexStr.charAt(high) + hexStr.charAt(low);
    low = b % 16;
    high = (b - low) / 16;
    hex += hexStr.charAt(high) + hexStr.charAt(low);
    return hex;
}

//将一个字符串加入到一个通过逗号分隔的字符串,如果重复则不添加
function addStrToArrayString(addStr, sourceStr) {
    var arr = sourceStr.split(",");
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (arr[i] == addStr) {
            return sourceStr;
        }
    }

    arr.push(addStr);
    var retStr = arr.join(",");
    if (retStr.indexOf(",") == 0) {
        retStr = retStr.substring(1);
    }
    return retStr;
}
//将用逗号分隔的字符串中的某个串，移除掉
function removeStrFromArrayString(removeStr, sourceStr) {
    var arr = sourceStr.split(",");
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (arr[i] == removeStr) {
            arr.splice(i, 1);
            var retStr = arr.join(",");
            if (retStr.indexOf(",") == 0) {
                retStr = retStr.substring(1);
            }
            return retStr;
        }
    }

    return sourceStr;
}

//控件用来翻页的函数
function TurnPageSmartView(pageId, smartViewId, isDesign, pageNumber, isAppend, formFields, searchCategory, searchKeyword, isMobile) {

    var loadingObj = $("#bakload");
    if (loadingObj != "" && loadingObj != null && typeof (loadingObj) != undefined) {
        loadingObj.show();
    }
    var isloadDesign = "true";
    var viewId = smartViewId.split("_")[2];
    var href = "/Plugins/RunTime/TurnPageSmartView?pagenumber=" + pageNumber + "&loaddesign=" + isloadDesign + "&pageId=" + pageId + "&smartViewId=" + viewId + "&isDesign=" + isDesign;
    if (typeof (searchCategory) != "undefined") {
        href = href + "&keyword=" + searchKeyword + "&searchCategory=" + searchCategory;
    }

    var fields = formFields.split(",");
    var strData = "pageId=" + pageId + "&smartViewId=" + viewId + "&isDesign=" + isDesign + "&isAppend=" + isAppend;
    if (isMobile != "undefined") {
        strData += "&yibu_IsMobileDevice=" + isMobile
    }

    for (var i = 0; i < fields.length - 1; i++) {
        strData = str + "&" + fields[i] + "=" + $("#" + smartViewId + " .yibuFrameContent input[name='" + fields[i] + "']").val();
    }
    $.ajax({
        cache: false,
        url: href,
        data: strData,
        type: 'get',
        success: function (data) {
            if (!isAppend) {//翻页
                $("#" + smartViewId + " .yibuFrameContent").html(data);
            }
            else //查看更多
            {
                $("#" + smartViewId + " .yibuFrameContent .pager").remove();
                $("#" + smartViewId + " .yibuFrameContent").append($(data));
            }
            if (loadingObj != "" && loadingObj != null && typeof (loadingObj) != undefined) {
                loadingObj.hide();
            }
        }
    });
}

//控件用来翻页的函数
function TurnPageCategoryListSmartView(pageId, smartViewId, isDesign, pageNumber, isAppend, formFields, entityName, categoryId, isMobile) {
    var loadingObj = $("#bakload");
    if (loadingObj != "" && loadingObj != null && typeof (loadingObj) != undefined) {
        loadingObj.show();
    }
    var isloadDesign = "true";
    var viewId = smartViewId.split("_")[2];
    var href = "/Plugins/RunTime/TurnPageSmartView?pagenumber=" + pageNumber + "&loaddesign=" + isloadDesign + "&pageId=" + pageId + "&smartViewId=" + viewId + "&isDesign=" + isDesign;
    if (typeof (categoryId) != "undefined") {
        href = href + "&EntityTypeName=" + entityName + "&categoryId=" + categoryId;
    }
    var fields = formFields.split(",");
    var strData = "pageId=" + pageId + "&smartViewId=" + viewId + "&isDesign=" + isDesign + "&isAppend=" + isAppend;
    if (typeof (isMobile) != "undefined") {
        strData += "&yibu_IsMobileDevice=" + isMobile
    }

    for (var i = 0; i < fields.length - 1; i++) {
        strData = str + "&" + fields[i] + "=" + $("#" + smartViewId + " .yibuFrameContent input[name='" + fields[i] + "']").val();
    }
    $.ajax({
        cache: false,
        url: href,
        data: strData,
        type: 'get',
        success: function (data) {
            if (!isAppend) {//翻页
                $("#" + smartViewId + " .yibuFrameContent").html(data);
            }
            else //查看更多
            {
                $("#" + smartViewId + " .yibuFrameContent .pager").remove();
                $("#" + smartViewId + " .yibuFrameContent").append($(data));
            }
            if (loadingObj != "" && loadingObj != null && typeof (loadingObj) != undefined) {
                loadingObj.hide();
            }
        }
    });
}

function createBaiduMap(mapSettings, flag) {
    try {
        var mapOpts = { offset: new BMap.Size(10, 5) }
        // 百度地图API功能
        var map = new BMap.Map(mapSettings.id);            // 创建Map实例
        var point = new BMap.Point(116.404, 39.915);    // 创建点坐标
        map.centerAndZoom(point, 15);                     // 初始化地图,设置中心点坐标和地图级别。
        if (mapSettings.ShowNavigation) {
            map.addControl(new BMap.NavigationControl());
        }
        if (mapSettings.ShowScale) {
            map.addControl(new BMap.ScaleControl(mapOpts));
        }
        if (mapSettings.ShowMapType) {
            map.addControl(new BMap.MapTypeControl());
        }
        map.enableScrollWheelZoom();                            //启用滚轮放大缩小
        var startPoint;
        var endPoint;
        var content = '<div style="margin:0;line-height:20px;padding:2px;">' + mapSettings.content + '</div>';
        //创建检索信息窗口对象
        var searchInfoWindow = null;
        var windowSettings = {};
        windowSettings.title = mapSettings.title;
        windowSettings.width = 100;
        windowSettings.height = 105;
        windowSettings.panel = "panel";
        windowSettings.enableAutoPan = true;
        var searchTypes = [];
        if (mapSettings.ShowSearch) {
            searchTypes.push(BMAPLIB_TAB_SEARCH);
        }
        if (mapSettings.ShowToHere) {
            searchTypes.push(BMAPLIB_TAB_TO_HERE);
        }
        if (mapSettings.ShowFromHere) {
            searchTypes.push(BMAPLIB_TAB_FROM_HERE);
        }
        windowSettings.searchTypes = searchTypes;
        searchInfoWindow = new BMapLib.SearchInfoWindow(map, content, windowSettings);
        var myGeo = new BMap.Geocoder();
        var newMarker;
        myGeo.getPoint(mapSettings.address, function (spoint) {
            if (spoint) {
                endPoint = spoint;
                map.centerAndZoom(spoint, 16);
                newMarker = new BMap.Marker(spoint);
                map.addOverlay(newMarker);
                if (mapSettings.ShowWindow) {
                    searchInfoWindow.open(newMarker);
                }
                newMarker.addEventListener("click", function (e) {
                    searchInfoWindow.open(newMarker);
                });
                if (startPoint != undefined) {
                    var driving = new BMap.DrivingRoute(map, { renderOptions: { map: map, autoViewport: true } });
                    driving.search(startPoint, endPoint);
                }
            }
        }, "");

        map.addEventListener("tilesloaded", function () {
            jQuery('.anchorBL').hide();
            var cpy = jQuery('.BMap_cpyCtrl');
            cpy.hide();
            jQuery('.BMap_scaleCtrl').show();
        });
        var geolocation = new BMap.Geolocation();
        geolocation.getCurrentPosition(function (r) {
            if (this.getStatus() == BMAP_STATUS_SUCCESS) {
                var mk = new BMap.Marker(r.point);
                map.addOverlay(mk);
                map.panTo(r.point);
                startPoint = r.point;
                if (endPoint != undefined) {
                    var driving = new BMap.DrivingRoute(map, { renderOptions: { map: map, autoViewport: true } });
                    driving.search(r.point, endPoint);
                }
            }
            else {

            }
        }, { enableHighAccuracy: true })
    } catch (e) {
        if (flag == 0) {
            createBaiduMap(mapSettings, 1);
        }
    }
}

function ShowCommonImageDialog(selectedIds, successFunc) {
    var url = "/Plugins/Image/AddPicListPanel";
    var buttons = [{
        text: "确定", click: function () {
            $.ajax({
                type: 'post',
                url: "/Plugins/Image/ReturnImageJson",
                data: { ids: $("#hfImgId").val() },
                dataType: "json",
                success: function (data) {
                    successFunc(data);

                }
            });
            $(this).ajaxdialog("close");
        }
    },
        {
            text: "取消", click: function () {
                $(this).ajaxdialog("close");
            }
        }];
    var processData = function (event, srcObj) {
        srcObj.htmlElement.html(srcObj.httpData);
    }
    ShowTopDialog(url, '选择图片', 600, 480, buttons, processData);
}


/*******语言切换********/
function DisplayLang() {
    if ($("#wapPreview").length == 0) {
        if ($("#langyY").length == 0) {
            $.ajax({
                cache: false,
                url: "/Plugins/LanSwitchSmartView/QueryLang",
                type: 'post',
                success: function (data) {
                    if (data != "") {
                        var _divdisplay = "<div id='langyY' style='height: 100%;width: 100%;position: fixed;z-index: 1;top: 0; display:none;'>";
                        _divdisplay += "<div style='width: 284px;margin-left: auto;margin-right: auto;margin-top:15%' class='cke_1_dialog cke_editor_body_dialog cke_skin_kama' id='artcon'>";
                        _divdisplay += "<table style='z-index: 10010;' class='cke_dialog cke_browser_gecko cke_ltr'>";
                        _divdisplay += "<tbody><tr><td role='presentation'><div role='presentation' class='cke_dialog_body'><div role='presentation' class='cke_dialog_title'>提示</div>";
                        _divdisplay += "<a role='button' title='关闭' onclick='displaylangClose()' href='javascript:void(0)' class='cke_dialog_close_button' id='cke_dialog_close_button_86'>";
                        _divdisplay += "<span class='cke_label'>X</span></a><table role='presentation' class='cke_dialog_contents'><tbody><tr>";
                        _divdisplay += "<td role='presentation' class='cke_dialog_contents ' style='width: 240px;'>";
                        var str = data.split('|');
                        for (var i = 0; i < str.length; i++) {
                            if (str[i] != "") {
                                var str1 = str[i].split(',');
                                if (str1[0] == "CN") {
                                    _divdisplay += "<div class='btn-add change-btn' onclick='btnDisplay(" + str1[1] + ")'>切换至中文版本</div>";
                                } else if (str1[0] == "English") {
                                    _divdisplay += "<div class='btn-add change-btn' onclick='btnDisplay(" + str1[1] + ")'>切换至英文版本</div>";
                                }
                            }
                        }
                    }
                }
            });
        }
    }
}
function OnReviewsSubmit() {
    $.ajax({
        cache: false,
        url: "/Plugins/ProductInfoSmartView/AddProductReview",
        data: { ReviewTitle: $("#reviewtitle").val(), ReviewContent: $("#reviewcontent").val() },
        type: 'post',
        success: function (data) {
            if (data == "1") {

            }
        },
        error: function (e) { alert(e) }
    });
}

/*产品详情页*/
var _phct = true;
$(function () {
    $("#Pcolor0 li").click(function () {
        $("#Pcolor0 li").removeClass("selected");
        $(this).addClass("selected");
    });
    $("#Pcolor1 li").click(function () {
        $("#Pcolor1 li").removeClass("selected");
        $(this).addClass("selected");
    });
    $("#Pcolor2 li").click(function () {
        $("#Pcolor2 li").removeClass("selected");
        $(this).addClass("selected");
    });
    $("#Pcolor3 li").click(function () {
        $("#Pcolor3 li").removeClass("selected");
        $(this).addClass("selected");
    });
    $("#Pcolor4 li").click(function () {
        $("#Pcolor4 li").removeClass("selected");
        $(this).addClass("selected");
    });
    //$("#Psize li").click(function () {
    //    $("#Psize li").removeClass("selected");
    //    $(this).addClass("selected");
    //});
    $("#ptabs #t1_1").click(function () {
        $("#ptabs li").removeClass("current");
        $(this).addClass("current");
        $("#d1_1").css("display", "block");
        $("#d1_2").css("display", "none");
    })
    $("#ptabs #t1_2").click(function () {
        $("#ptabs li").removeClass("current");
        $(this).addClass("current");
        $("#d1_2").css("display", "block");
        $("#d1_1").css("display", "none");
    })
    $("#pshare").click(function () {
        if ($(".p_share_bd ul").width() == 77) {
            $(".p_share_bd ul").removeClass("p_share_list_items");
            $("#pshare").addClass("p_share_fts");
        } else {
            $(".p_share_bd ul").addClass("p_share_list_items");
            $("#pshare").removeClass("p_share_fts");
        }
    })
    //菜单控件的事件绑定
    $(".u_nav_item").mouseenter(function (obj) {
        var subMenu = $(this).children(".u_nav_submain");
        $("#tempSubMenuId").remove();
        //有子菜单
        if (subMenu.length > 0) {
            var ret = GetAbsoluteLocationEx($(this)[0]);
            var className = $(this).attr("class");
            var parentClass = $(this).parent().attr("class");//菜单栏目条
            var topParentClass = $(this).parent().parent().attr("class");
            var cloneMenu = subMenu.clone();
            var container = $("<div class='" + topParentClass + "'><div class='" + parentClass + "' style='width:100%;'><div class='" + className + "'  style='width:100%;'></div></div></div>").appendTo($("body"));
            cloneMenu.appendTo(container.find("div>div"));
            container.css({
                "top": parseInt(ret.absoluteTop) + (parentClass == "u_nav_main_vleft" || parentClass == "u_nav_main_vright" ? 0 : parseInt($(this).height())) + "px",
                "left": ret.absoluteLeft - (parentClass == "u_nav_main_vright" ? parseInt(ret.offsetWidth) * 2 : 0) + "px",
                "position": "absolute", "min-width": $(this).width(), "height": "auto", "z-index": 99999
            });
            container.attr("id", "tempSubMenuId");
            cloneMenu.css("width", "100%");
            cloneMenu.css("display", "block");
            container.show();
        }
    });
    $(document).on('click', function () {
        $("#tempSubMenuId").remove();
    });
})

function setRenderFullScreen(fullView, dependOn) {
    var offsetLeft = parseInt(fullView.parent().offset().left);
    offsetLeft += parseInt(fullView.position().left);
    var height = fullView.height();

    var windowWith = $(window).width();
    if (dependOn != 'window') {
        var documentWidth = $(document).width();
        if (windowWith < documentWidth) {
            windowWith = documentWidth;
        }
    }
    var winWidthCopy = windowWith;
    var rightWidth = parseInt(fullView.children("div").find(".renderfullScreen").css("border-right-width"), 10);
    var leftWidth = parseInt(fullView.children("div").find(".renderfullScreen").css("border-left-width"), 10);
    if (!isNaN(rightWidth) && !isNaN(leftWidth)) {
        windowWith = windowWith - rightWidth - leftWidth;
    }

    if (windowWith > winWidthCopy) {
        windowWith = winWidthCopy;
    }
    if ($(window).height() < $(document).height())
        windowWith = windowWith - 1;
    fullView.children().css("overflow", "visible").children("div:eq(0)").css({ "left": -offsetLeft + "px", "width": windowWith, "height": height });
    //$("#" + htmlElementId).css("width", windowWith + "px").children("div:eq(0)").css("width", windowWith + "px");

}

$(window).resize(function () {

    $(".renderfullScreen").each(function () {
        var fullView = $(this).parentsUntil(".yibuSmartViewMargin").parent();
        setRenderFullScreen(fullView);
    });
});

Array.prototype.indexOf = function (el) {
    for (var i = 0, n = this.length; i < n; i++) {
        if (this[i] === el) {
            return i;
        }
    }
    return -1;
}

String.prototype.format = function (args) {
    var result = this;
    if (arguments.length > 0) {
        if (arguments.length == 1 && typeof (args) == "object") {
            for (var key in args) {
                if (args[key] != undefined) {
                    var reg = new RegExp("({" + key + "})", "g");
                    result = result.replace(reg, args[key]);
                }
            }
        }
        else {
            for (var i = 0; i < arguments.length; i++) {
                if (arguments[i] != undefined) {
                    var reg = new RegExp("({[" + i + "]})", "g");
                    result = result.replace(reg, arguments[i]);
                }
            }
        }
    }
    return result;
}
/******jquery.cookie.js*********/
jQuery.cookie = function (name, value, options) {
    if (typeof value != 'undefined') {
        options = options || {};
        if (value === null) {
            value = '';
            options.expires = -1;
        }
        var expires = '';
        if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
            var date;
            if (typeof options.expires == 'number') {
                date = new Date();
                date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
            } else {
                date = options.expires;
            }
            expires = '; expires=' + date.toUTCString();
        }
        var path = options.path ? '; path=' + options.path : '';
        var domain = options.domain ? '; domain=' + options.domain : '';
        var secure = options.secure ? '; secure' : '';
        document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
    } else {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
};
/******jquery.cookie.js*********/


function SetNavSelectedStyle(navId, navType) {
    var rawurl = window.location.pathname + window.location.search;
    $("#" + navId).children("li").each(function () {
        var href = $(this).find("a").attr("href");
        if (href != null) {
            href = href.replace(" ", "%20");
            if (href.toLowerCase() == rawurl.toLowerCase()) {
                if (navType == "nav")
                    $(this).addClass("w_nav_item_current");
                else
                    $(this).addClass("w_vnav_item_current");
                return;
            }
        }
        if ($(this).children("ul").length > 0) {
            $(this).children("ul").children("li").each(function () {
                href = $(this).find("a").attr("href");
                if (href != null) {
                    href = href.replace(" ", "%20");
                    if (href.toLowerCase() == rawurl.toLowerCase()) {
                        if (navType == "nav")
                            $(this).addClass("w_subnav_item_current");
                        else
                            $(this).addClass("w_subvnav_item_current");
                        return;
                    }
                }
            });
        }
    });
}

this.ShowFileDialog = function (maxSelect, callback) {
    var editor = KindEditor.editor({
        fileManagerJson: '/admin/picture/GetImageFileList'
    });
    $('#filemanager').unbind("click").click(function () {
        editor.loadPlugin('filemanager', function () {
            editor.plugin.filemanagerDialog({
                viewType: 'VIEW',
                dirName: 'image',
                maxSelect: maxSelect,
                selectedIds: $("#selectedIds") == undefined ? "" : $("#selectedIds").val(),
                success: function (pictureList) {
                    callback(pictureList);
                    editor.hideDialog();
                }
            });
        });
    });
}

function GetAbsoluteLocationEx(element) {
    if (arguments.length != 1 || element == null) {
        return null;
    }
    var elmt = element;
    var offsetTop = elmt.offsetTop;
    var offsetLeft = elmt.offsetLeft;
    var offsetWidth = elmt.offsetWidth;
    var offsetHeight = elmt.offsetHeight;
    while (elmt = elmt.offsetParent) {

        // add this judge 
        if (elmt.style.position == 'absolute' || elmt.style.position == 'relative'
            || (elmt.style.overflow != 'visible' && elmt.style.overflow != '')) {
            break;
        }
        offsetTop += elmt.offsetTop;
        offsetLeft += elmt.offsetLeft;
    }
    return {
        absoluteTop: offsetTop, absoluteLeft: offsetLeft,
        offsetWidth: offsetWidth, offsetHeight: offsetHeight
    };
}

//绑定的事件数组
var _eventBoundArray = new Array();
var YibuPropertyBinder = {
    createNew: function (srcElement, eventKey, srcProType, srcProName, targetSelector, targetProType, targetProName) {
        var binder = {};
        binder.srcElement = srcElement;
        binder.eventKey = eventKey;
        binder.srcProType = srcProType;
        binder.srcProName = srcProName;
        binder.targetSelector = targetSelector;
        binder.targetProType = targetProType;
        binder.targetProName = targetProName;
        return binder;
    }

};

var YibuEventBinder = {
    createNew: function (srcElement, eventKey, eventFunc) {
        var binder = {};
        binder.srcElement = srcElement;
        binder.eventKey = eventKey;
        binder.eventFunc = eventFunc;
        return binder;
    }

};

//srcElement: 指在编辑控件属性界面的元素，比如input文本框，下拉框的等。此处需为jquery对象
//eventKey：指编辑控件界面元素的触发事件，是标准的jquery Event key.目前支持click,keyup,keydown,mouseup,mousedown等
//srcProType:目前支持attr,css,val,html
//srcProName:是配合srcProType来的，如 srcProType=attr,srcProName=id. 就是对应attr("id");
//targetSelector:jquery选择器，是一个控件相对的路径,支持标准的Jquery选择器。如"div .abc"
//targetProType:目前支持attr,css,val,html
//targetProName:是配合targetProType来的。当targetProType为val,html时该参数可以为空
function BindOnePropertyToSmartView(srcElement, eventKey, srcProType, srcProName, targetSelector, targetProType, targetProName) {
    var binder = YibuPropertyBinder.createNew(srcElement, eventKey, srcProType, srcProName, targetSelector, targetProType, targetProName);
    _eventBoundArray.push(binder);
}
//给目标控件直接绑定一个事件。所有的逻辑由事件函数来处理
function BindOneEventFuncToSmartVeiw(srcElement, eventKey, func) {
    var binder = YibuEventBinder.createNew(srcElement, eventKey, func);
    _eventBoundArray.push(binder);
}

function BindAllEventsToSmartView(htmlElementId) {
    var len = _eventBoundArray.length;
    for (var i = 0; i < len; i++) {
        var binder = _eventBoundArray[i];
        if (binder.targetSelector != null && binder.targetSelector != "undefined") {

            binder.srcElement.bind(binder.eventKey, { bd: binder }, function (event) {
                var _binder = event.data.bd;
                var obj = $("#" + htmlElementId + " " + _binder.targetSelector, $('#mainFrame')[0].contentWindow.document);
                var srcValue = "";
                var that = $(this);
                switch (_binder.srcProType) {
                    case "attr":
                        srcValue = that.attr(_binder.srcProName);
                        break;
                    case "css":
                        srcValue = that.css(_binder.srcProName);
                        break;
                    case "val":
                        srcValue = that.val();
                        break;
                    case "html":
                        srcValue = that.html();
                        break;
                };
                switch (_binder.targetProType) {
                    case "attr":
                        obj.attr(_binder.targetProName, srcValue);
                        break;
                    case "css":
                        obj.css(_binder.targetProName, srcValue);
                        break;
                    case "html":
                        obj.html(srcValue);
                        break;
                    case "val":
                        obj.val(srcValue);
                        break;
                }
            });
        }
        else {
            binder.srcElement.bind(binder.eventKey, { bd: binder }, function (event) {
                event.data.bd.eventFunc(event.data.bd.srcElement);
            });
        }
    }
}


function GetCurrentStrWidth(text, font) {
    var currentObj = $('<span>').hide().appendTo(document.body);
    $(currentObj).html(text).css('font-size', font);
    var width = currentObj.width();
    currentObj.remove();
    return width;
}

function slideMenu(navId) {
    jQuery("#" + navId).slide({
        type: "menu",// 效果类型，针对菜单/导航而引入的参数（默认slide）
        titCell: ".w_nav_item", //鼠标触发对象
        targetCell: ".w_subnav", //titCell里面包含的要显示/消失的对象
        effect: "slideDown", //targetCell下拉效果
        delayTime: 300, //效果时间
        triggerTime: 0, //鼠标延迟触发时间（默认150）
        returnDefault: true //鼠标移走后返回默认状态，例如默认频道是“预告片”，鼠标移走后会返回“预告片”（默认false）
    });
}
function ChangeImage(HElement) {
    var ImageWidth = $("#autosize_" + HElement + " #w_" + HElement).val();
    var ImageHeight = $("#autosize_" + HElement + " #h_" + HElement).val();
    var autoimg = $("#autosize_" + HElement + " img");
    var aotoparent = $("#autosize_" + HElement);
    if (ImageWidth != "") {
        var w = $(aotoparent).parent().width();
        var h = $(aotoparent).parent().height();
        var img_w = ImageWidth;
        var img_h = ImageHeight;
        var height = (w * img_h) / img_w;
        var height2;
        if (height < h) {
            height2 = h - height;
            $(autoimg).css("width", height2 * 2 + w);
            $(autoimg).css("margin-left", height2 - height2 * 2);
            $(autoimg).css("height", h);
        } else {
            height2 = height - h;
            $(autoimg).css("height", height2 + height);
            $(autoimg).css("margin-top", height2 - height2 * 2);
            $(autoimg).css("width", w);
        }
    }
}

//判断第二个参数的控件是否在第一个参数控件之下
function IsPositionBehind(lastExpanView, view) {
    var minHeight = lastExpanView.css("min-height");
    minHeight = _.isUndefined(minHeight) || minHeight == 0 ? lastExpanView.height() : parseInt(minHeight.substring(0, minHeight.length - 2));
    if (lastExpanView.offset()) {
        var lastViewBottom = parseInt(lastExpanView.offset().top) + minHeight;
        var lastViewRight = parseInt(lastExpanView.offset().left) + parseInt(lastExpanView.width());
    }

    //如果当前控件在前一个自动扩展控件的正下方，则自动扩展值相加，否则取二者之间的最大值
    if (parseInt(view.offset().top) >= lastViewBottom &&
        parseInt(view.offset().left + view.width()) > parseInt(lastExpanView.offset().left) &&
        parseInt(view.offset().left) < lastViewRight) {
        return true;
    }
    return false;
}
//判断第二个控件是否跟第一个控件部分或全部重叠
function IsOverlaying(lastExpanView, view) {
    var minHeight = lastExpanView.css("min-height");
    minHeight = minHeight.indexOf("px") > 0 ? parseInt(minHeight.substring(0, minHeight.length - 2)) : lastExpanView.height();
    var lastViewBottom = parseInt(lastExpanView.offset().top) + minHeight;
    var lastViewRight = parseInt(lastExpanView.offset().left) + parseInt(lastExpanView.width());
    if (parseInt(parseInt(view.offset().top) > parseInt(lastExpanView.offset().top)
        && parseInt(view.offset().top) <= lastViewBottom &&
        parseInt(view.offset().left + view.width()) > parseInt(lastExpanView.offset().left) &&
        parseInt(view.offset().left) < lastViewRight
        )) {
        return true;
    }
    return fasle;
}

function RefreshAutoExpandHeight(container, expandedAreaHeight) {

    if (expandedAreaHeight > 0) {
        var content = $(container).parentsUntil(".yibuFrameContent");
        content.each(function (index, el) {
            $(el).height($(el).height() + expandedAreaHeight);
        });

        if (content.length > 0) {
            var containerView = content.last().parent().parent();
            if (containerView.css("overflow") == "visible" && containerView.css("min-height") != "0px") {//标签控件等自身容器已经撑开
                containerView.height(parsePxToInt(containerView.css("min-height")) + expandedAreaHeight);
            }
            else {
                containerView.height(containerView.height() + expandedAreaHeight);
            }
        }
        else if ($(container).parent().hasClass("yibuFrameContent"))//普通主控件
        {

            var containerView = $(container).parent().parent();
            containerView.height(containerView.height() + expandedAreaHeight);
        }

    }

}

function parsePxToInt(px) {
    return parseInt(px.substring(0, px.length - 2));
}

//计算所有绝对定位，并且overflow=visible的控件，下方控件的Top值
function ReComputeVisibleSmartViewTop(func) {
    this.IsImgLoaded = function (imgList, callback) {

        var timeCount = 1000 * 5; //最多容许6秒钟的图片加载时间
        var exeTime = 0;
        var timer = setInterval(function () {
            var loaded = true;
            _.each(imgList, function (img, index) {
                if (!img.complete) {
                    loaded = false;
                }
            });
            exeTime += 50;
            //超时或者图片已经全部加载
            if (loaded || exeTime >= timeCount) {
                clearInterval(timer);
                callback(imgList);
            }

        }, 50);
    }

    //应该分区域计算。找到网页的各个区域，页头页尾，内容区，左右侧,容器控件等
    var areas = $(".runTimeflowsmartView,.isflowcontainer");
    //将区域按照层次的深度倒序排列，先处理最深的子级容器
    areas = _.sortBy(areas, function (oneArea) { return -$(oneArea).parents().length });
    _.each(areas, function (el, index) {
        var oneArea = $(el);
        //再找到各个区域里边，内容为自动扩展的控件.永远只找直接子级控件
        var allViews = oneArea.children("div[class^='yibuSmartViewMargin absPos']");
        //记录所有控件的原始位置和minHeight
        allViews.each(function (index, el) {
            var oneEl = $(this);
            var child = oneEl.children(".yibuFrameContent");
            var oldHeight;
            if (child.hasClass("overflow_hidden") == false && child.hasClass("overflow_auto") == false) {
                oldHeight = _.isUndefined(oneEl.css("min-height")) || oneEl.css("min-height") == "0px" ? oneEl.height() : parsePxToInt(oneEl.css("min-height"));
            }
            else {
                oldHeight = oneEl.height();
            }
            var oldTop = parsePxToInt(oneEl.css("top"));
            $(this).attr("oldBottom", oldTop + oldHeight);
        });
        var imgList = new Array();
        var autoExpanViews = _.filter(allViews, function (oneView) {
            //如果自动扩展控件存在LazyLoad的问题，则让图片先加载
            $(oneView).find("img").each(function () {
                //同时也除非lazyload的图片
                if ($(this).hasClass("lazyload")) {
                    $(this).attr("src", $(this).attr("data-original"));
                }
                imgList.push(this);
            });
            var child = $(oneView).children(".yibuFrameContent");
            return child.hasClass("overflow_hidden") == false && child.hasClass("overflow_auto") == false && $(oneView).css("min-height") != "0px";
        });

        //所有图片加载了就回掉
        IsImgLoaded(imgList, function (imgList) {
            //根据Top位置，从上到下排序
            autoExpanViews = _.sortBy(autoExpanViews, function (oneView) { return $(oneView).offset().top; });

            //遍历每个自动扩展的控件的下方，找到所有绝对定位的控件，然后调整其Top值
            for (var k in autoExpanViews) {
                var view = $(autoExpanViews[k]);

                var expandedHeight = view.height() - parseInt(view.css("min-height"));

                //找到当前区域下面所有的控件
                allViews.each(function (index, el) {
                    var x = $(this);
                    //找到自动扩展控件垂直下方的控件
                    if (x != view && IsPositionBehind(view, x)) {
                        var myTop = parsePxToInt(x.css("top"));
                        x.css("top", (myTop + expandedHeight) + "px");
                    }
                });
            }
            var maxBottomView = null;
            var maxBottom = 0;
            allViews.each(function (index, el) {
                var x = $(this);
                //如果当前控件在更加下面的位置
                if (maxBottomView == null || parsePxToInt(x.css("top")) + x.height() > maxBottom) {
                    maxBottom = parsePxToInt(x.css("top")) + x.height();
                    maxBottomView = x;
                }
            });
            //存在最底部的控件.并且控件的底部位置被往下移动了。则需要改变父容器的高度
            if (maxBottomView != null && maxBottom > parseInt(maxBottomView.attr("oldBottom"))) {
                var expandedAreaHeight = maxBottom - parseInt(maxBottomView.attr("oldBottom"));
                RefreshAutoExpandHeight(oneArea, expandedAreaHeight);
            }
            if (!_.isUndefined(func)) {
                func();
            }
        });
    });
}

//分页
//TagId:目标源DIV的ID
function Pagination(TagId) {
    var HtmlId = TagId;
    var newContainer = $('#' + HtmlId);
    if (newContainer.html() != null) {
        //查找分页标记
        var contents = newContainer.find("div").html().split('_ueditor_page_break_tag_');
        var length = contents.length;
        if (length != 1) {
            //创建一个动态块存放分页
            var paginationDiv = $('<div />', {
                'class': 'pagination'
            });
            newContainer.append(paginationDiv);
            paginationDiv.append("<span id=pre_page_" + TagId + ">上一页</span>");
            for (var i = 0; i < length; i++) {
                paginationDiv.append("<a class='page' id=" + i + ">" + (i + 1) + "</a>");
            }
            var page = newContainer.find(".page");
            paginationDiv.append("<span id=post_page_" + TagId + ">下一页</span>");
            page.first().addClass("hover");
            page.click(function () {
                page.removeClass("hover");
                newContainer.find("div:eq(0)").html(contents[$(this).attr('id')]);
                $(this).addClass("hover");
            });
            prepage = $("#pre_page_" + TagId);
            postpage = $("#post_page_" + TagId);
            prepage.click(function () {
                var prevBtn = $(this).parent().find(".hover").prev();
                if (prevBtn.index() != 0) {
                    prevBtn.click();
                }
            });
            postpage.click(function () {
                var nextBtn = $(this).parent().find(".hover").next();
                if (nextBtn.index() != $(this).parent().children().length - 1) {
                    nextBtn.click();
                }
            });
        }
        newContainer.find("div:eq(0)").html(contents[0]);
    }
}